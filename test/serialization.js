caterwaul.module( 'serialization.test' ,function() { (function() {var $=caterwaul,mt=function() {;
return(function(xs) {var x1,x0,xi,xl,xr;
for(var xi=0,xl=xs.length;
xi<xl;
 ++xi)x1=xs[xi] , (test_case(x1) ) ;
return xs} ) .call(this,arguments) } ,json=function(x) {;
return(function() {try{return(JSON.stringify(x) ) }catch(e) {return( '<JSON error>' ) } } ) .call(this) } ,create_unknown=function() {;
return typeof document!== 'undefined' ?document.createElement( 'div' ) :new Buffer(10) } ;
return(test_case=function(x) {;
return(function() {var s=caterwaul.serialization() ,encoded=s(x) ,decoded1=s.decode(encoded) ,decoded2=s.decode(encoded) ;
return( (function(it) {return( ( (decoded1) && ( ( ! (decoded1.constructor===decoded2.constructor) && (console.log( ( '\033[1;31mSerialization failed to preserve constructor for ' + (x) + '\033[0;0m' ) ) ) ) ) ) ) ,it} ) .call(this, ( (function(it) {return( ( ! (json(x) ===json(decoded2) ) && (console.log( ( '\033[1;31mSerialization failed to preserve JSON for ' + (x) + '\033[0;0m' ) ) ) ) ) ,it} ) .call(this, ( (function(it) {return( ( ! (decoded1===x) && (console.log( ( '\033[1;31mSerialization failed to use abstract reference for ' + (x) + '\033[0;0m' ) ) ) ) ) ,it} ) .call(this, (console.log( ( '' + (json(x) ) + ' -> ' + (json(encoded) ) + ' -> (' + (decoded2) + ') ' + (json(decoded2) ) + '' ) ) ) ) ) ) ) ) ) } ) .call(this) } ,mt(undefined,null,true,false,Infinity, -Infinity,0) ,mt( '' , 'toString' , 'foo bar\u0000' ,1,1.1,Math.PI) ,mt(new String( '' ) ,new String( 'foo' ) ,new Number(10) ,new Boolean(true) ,new Boolean(false) ) ,mt( /foo/ , /bar/g , /bif/mig ,new Date() ,new Date(0) ,function(x) {return x+1} ,function() {} ,function(x) {} ,function() {return this} ) ,mt( [] , [1,2,3] , [1] , [null] , [ [] ] , [undefined] , [true,false,NaN] , [ {} ] , [new String( 'foo' ) ] ) ,mt( {} , {foo: 'bar' } , {foo:1} , { '' :1} , {foo: { '' :null} } , {array: [] } , {x: [new Date() ] } ) ,mt( (function(it) {return( (it) .push(it) ) ,it} ) .call(this, ( [] ) ) , (function(it) {return(it.foo=it) ,it} ) .call(this, ( {} ) ) , (function(it) {return( (it) .push( [it] ) ) ,it} ) .call(this, ( [] ) ) , (function(it) {return( (it.foo) .push(it) ) ,it} ) .call(this, ( {foo: [] } ) ) ) ,mt(console,$) ,mt(new $.serialization.unknown(10) ,new $.serialization.unknown($.gensym() ) ) , (function() {var s1=caterwaul.serialization() ,s2=caterwaul.serialization() ,unknown=create_unknown() ,encoded=s2(s2.decode(s1(unknown) ) ) ;
return( ( ! ( (s1) .decode(encoded) ===unknown) && ( (function() {throw( 'Unknown is not closed under cross-stream decoding (encoded: \033[1;33m' + (json(s1(unknown) ) ) + '\033[0;0m vs \033[1;33m' + (json(encoded) ) + '\033[0;0m)' ) } ) .call(this) ) ) ) } ) .call(this) , (function() {var s1=caterwaul.serialization() ,s2=caterwaul.serialization() ,s3=caterwaul.serialization() ,unknown=create_unknown() ,encoded=s3.decode(s2(s1(unknown) ) ) ;
return( ( ! ( (s1) .decode(encoded) ===unknown) && ( (function() {throw( 'Unknown is not closed under mismatched decoding (encoded: \033[1;33m' + (json(s1(unknown) ) ) + '\033[0;0m vs \033[1;33m' + (json(encoded) ) + '\033[0;0m)' ) } ) .call(this) ) ) ) } ) .call(this) ,console.log( '\n\n\033[1;32mOk, everything worked. You can ignore the garbage above.\033[0;0m\n\n' ) ) } ) .call(this) } ) ;
